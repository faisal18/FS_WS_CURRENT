<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="65b1a382-bce0-43d8-b86b-b21b14ffafd1" activeEnvironment="Default" name="QA-Testing_Rest_Mocking" resourceRoot="" soapui-version="5.1.1" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="Port">8081</con:setting></con:settings><con:interface xsi:type="con:RestService" id="79c41add-6b22-4389-8772-a06338183b98" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://lenovo-pc:8080" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://lenovo-pc:8080</con:endpoint></con:endpoints><con:resource name="PickCall" path="/PickCall" id="344f6f00-4e84-4112-a695-38840c84d964"><con:settings/><con:parameters/><con:method name="PickCall" id="dad5f905-4908-4b5c-83de-6937b376a83d" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>407 502</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>505</con:status><con:params/></con:representation><con:request name="Request 1" id="e4a5112c-5c18-4d2b-9d1f-4babdf62a14a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lenovo-pc:8080</con:endpoint><con:request/><con:originalUri>http://lenovo-pc/PickCall</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite id="ee052020-3247-4065-bd65-eecbde881c7e" name="PhoneCaller"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="a1180214-5ba8-4f51-9cd7-6ec34792286f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PHoneCall" searchProperties="true"><con:settings/><con:properties/><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:restMockService id="50f2d545-5ec8-411d-afd9-6f02d9601238" port="8080" path="/" host="Lenovo-PC" name="PhoneCall"><con:settings/><con:properties/><con:restMockAction name="PickCall" method="GET" resourcePath="/PickCall" id="82e1f9c1-f045-4b52-86df-d24478c75d62"><con:settings/><con:defaultResponse>Picked</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Picked" id="5cd668a5-a33b-450e-9e26-23c992dd235d" httpResponseStatus="200" mediaType="application/xml"><con:settings/><con:responseContent>Called Picked</con:responseContent></con:response><con:response name="Busy" id="9355d2cb-6ae7-40b1-b4cf-735fa423e418" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>UserBusy
</con:responseContent></con:response><con:response name="NetworkIssue" id="bc5b8d59-5c8e-4ecc-83e7-fb08da721ab9" httpResponseStatus="407"><con:settings/><con:responseContent/></con:response><con:response name="Error Response_XML" id="d16ab4cb-dd59-4aa5-b753-9ecd2efa02bb" httpResponseStatus="502"><con:settings/><con:responseContent><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
  <soapenv:Body>
    <soapenv:Fault>
      <faultcode>?</faultcode>
      <faultstring xml:lang="?">?</faultstring>
      <!--Optional:-->
      <faultactor>?</faultactor>
      <!--Optional:-->
      <detail>
        <!--You may enter ANY elements at this point-->
      </detail>
    </soapenv:Fault>
  </soapenv:Body>
</soapenv:Envelope>]]></con:responseContent></con:response><con:response name="Error Response _ JSON" id="0fd39658-1305-4406-ac47-d5a1a0bf87a7" httpResponseStatus="505" mediaType="application/json"><con:settings/><con:responseContent><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
  <soapenv:Body>
    <soapenv:Fault>
      <faultcode>?</faultcode>
      <faultstring xml:lang="?">?</faultstring>
      <!--Optional:-->
      <faultactor>?</faultactor>
      <!--Optional:-->
      <detail>
        <!--You may enter ANY elements at this point-->
      </detail>
    </soapenv:Fault>
  </soapenv:Body>
</soapenv:Envelope>]]></con:responseContent></con:response></con:restMockAction></con:restMockService><con:requirements/><con:properties/><con:wssContainer/><con:databaseConnectionContainer/><con:oAuth2ProfileContainer/><con:reporting><con:reportTemplates/><con:xmlTemplates/><con:parameters/></con:reporting><con:sensitiveInformation/></con:soapui-project>